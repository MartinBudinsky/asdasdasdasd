{
	"info": {
		"_postman_id": "117d8fea-b7bd-493e-a82c-6da6e548db71",
		"name": "createCarParkAndCarParkFloorWithIdAndParkingSpotWithoutType",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3466389"
	},
	"item": [
		{
			"name": "Create new car park",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('createCarParkAndCarParkFloorWithoutId', function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.name).to.eql(pm.variables.get('carParkName'));\r",
							"    pm.expect(jsonResponse.address).to.eql(pm.variables.get('carParkAddress'));\r",
							"    pm.expect(jsonResponse.prices).to.eql(parseInt(pm.variables.get('carParkPrice')));\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.collectionVariables.set(\"carParkId\", jsonResponse.id);\r",
							"\r",
							"    pm.expect(jsonResponse.floors).to.be.an('array');\r",
							"    pm.expect(jsonResponse.floors.length).to.eql(1);\r",
							"\r",
							"    const floor = jsonResponse.floors[0];\r",
							"    \r",
							"    pm.expect(floor.id).to.be.a('number');\r",
							"    pm.variables.set('carParkFloorId', floor.id);\r",
							"    pm.expect(floor.identifier).to.eql(pm.variables.get('carParkFloorIdentifier'));\r",
							"    pm.expect(floor.carPark).to.eql(pm.variables.get('carParkId'));\r",
							"\r",
							"    pm.expect(floor.spots).to.be.an('array');\r",
							"    pm.expect(floor.spots.length).to.eql(1);\r",
							"    console.log('a');\r",
							"    const spot = floor.spots[0];\r",
							"    pm.expect(spot.id).to.be.a('number');\r",
							"    pm.variables.set('parkingSpotId', spot.id);\r",
							"    pm.expect(spot.identifier).to.eql(pm.variables.get('parkingSpotIdentifier'));\r",
							"    pm.expect(spot.carParkFloor).to.eql(pm.variables.get('carParkFloorIdentifier'));\r",
							"    pm.expect(spot.carPark).to.eql(pm.variables.get('carParkId'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 29841333,\n  \"name\": \"{{carParkName}}\",\n  \"address\": \"{{carParkAddress}}\",\n  \"prices\": {{carParkPrice}},\n  \"floors\": [\n    {\n      \"identifier\": \"{{carParkFloorIdentifier}}\",\n      \"carPark\": 20057293,\n      \"spots\": [\n        {\n          \"id\": -10433444,\n          \"identifier\": \"{{parkingSpotIdentifier}}\",\n          \"carParkFloor\": \"{{carParkFloorIdentifier}}\",\n          \"carPark\": 86055832,\n          \"free\": true,\n          \"reservations\": []\n        }\n      ]\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/carparks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carparks"
					]
				}
			},
			"response": [
				{
					"name": "Entity created and returned",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 29841333,\n  \"name\": \"voluptate aute\",\n  \"address\": \"nulla\",\n  \"prices\": 23509364.03920953,\n  \"floors\": [\n    {\n      \"id\": 21058194,\n      \"identifier\": \"quis ad ea est\",\n      \"carPark\": 20057293,\n      \"spots\": [\n        {\n          \"id\": -43910668,\n          \"identifier\": \"eu sunt\",\n          \"carParkFloor\": \"elit veniam in est magna\",\n          \"carPark\": -4267909,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        {\n          \"id\": -81692092,\n          \"identifier\": \"labore aliquip sed dolor\",\n          \"carParkFloor\": \"occaecat velit consectetur cul\",\n          \"carPark\": -6019994,\n          \"free\": false,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"id\": 71324176,\n      \"identifier\": \"ex ut\",\n      \"carPark\": -71078999,\n      \"spots\": [\n        {\n          \"id\": 8496469,\n          \"identifier\": \"velit anim\",\n          \"carParkFloor\": \"ut ipsum cillum in adipisicing\",\n          \"carPark\": -12040139,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        {\n          \"id\": -63826307,\n          \"identifier\": \"cupidatat dolor\",\n          \"carParkFloor\": \"nostrud\",\n          \"carPark\": 73544789,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carparks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carparks"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": 29841333,\n  \"name\": \"voluptate aute\",\n  \"address\": \"nulla\",\n  \"prices\": 23509364.03920953,\n  \"floors\": [\n    {\n      \"id\": 21058194,\n      \"identifier\": \"quis ad ea est\",\n      \"carPark\": 20057293,\n      \"spots\": [\n        {\n          \"id\": -43910668,\n          \"identifier\": \"eu sunt\",\n          \"carParkFloor\": \"elit veniam in est magna\",\n          \"carPark\": -4267909,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        {\n          \"id\": -81692092,\n          \"identifier\": \"labore aliquip sed dolor\",\n          \"carParkFloor\": \"occaecat velit consectetur cul\",\n          \"carPark\": -6019994,\n          \"free\": false,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"id\": 71324176,\n      \"identifier\": \"ex ut\",\n      \"carPark\": -71078999,\n      \"spots\": [\n        {\n          \"id\": 8496469,\n          \"identifier\": \"velit anim\",\n          \"carParkFloor\": \"ut ipsum cillum in adipisicing\",\n          \"carPark\": -12040139,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        {\n          \"id\": -63826307,\n          \"identifier\": \"cupidatat dolor\",\n          \"carParkFloor\": \"nostrud\",\n          \"carPark\": 73544789,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}"
				},
				{
					"name": "Incorrectly formed body",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 29841333,\n  \"name\": \"voluptate aute\",\n  \"address\": \"nulla\",\n  \"prices\": 23509364.03920953,\n  \"floors\": [\n    {\n      \"id\": 21058194,\n      \"identifier\": \"quis ad ea est\",\n      \"carPark\": 20057293,\n      \"spots\": [\n        {\n          \"id\": -43910668,\n          \"identifier\": \"eu sunt\",\n          \"carParkFloor\": \"elit veniam in est magna\",\n          \"carPark\": -4267909,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        {\n          \"id\": -81692092,\n          \"identifier\": \"labore aliquip sed dolor\",\n          \"carParkFloor\": \"occaecat velit consectetur cul\",\n          \"carPark\": -6019994,\n          \"free\": false,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"id\": 71324176,\n      \"identifier\": \"ex ut\",\n      \"carPark\": -71078999,\n      \"spots\": [\n        {\n          \"id\": 8496469,\n          \"identifier\": \"velit anim\",\n          \"carParkFloor\": \"ut ipsum cillum in adipisicing\",\n          \"carPark\": -12040139,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        {\n          \"id\": -63826307,\n          \"identifier\": \"cupidatat dolor\",\n          \"carParkFloor\": \"nostrud\",\n          \"carPark\": 73544789,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carparks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carparks"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get carp park by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('getCarParkAndCarParkFloorWithoutId', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.name).to.eql(pm.variables.get('carParkName'));\r",
							"    pm.expect(jsonResponse.address).to.eql(pm.variables.get('carParkAddress'));\r",
							"    pm.expect(jsonResponse.prices).to.eql(parseInt(pm.variables.get('carParkPrice')));\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.collectionVariables.set(\"carParkId\", jsonResponse.id);\r",
							"\r",
							"   pm.expect(jsonResponse.floors).to.be.an('array');\r",
							"    pm.expect(jsonResponse.floors.length).to.eql(1);\r",
							"\r",
							"    const floor = jsonResponse.floors[0];\r",
							"\r",
							"    pm.expect(floor.identifier).to.eql(pm.variables.get('carParkFloorIdentifier'));\r",
							"    pm.expect(floor.carPark).to.eql(pm.variables.get('carParkId'));\r",
							"    pm.expect(floor.id).to.eql(pm.variables.get('carParkFloorId'));\r",
							"    pm.expect(floor.spots).to.be.an('array');\r",
							"    pm.expect(floor.spots.length).to.eql(1);\r",
							"\r",
							"    const spot = floor.spots[0];\r",
							"    pm.expect(spot.id).to.be.a('number');\r",
							"    pm.expect(spot.id).to.eql(pm.variables.get('parkingSpotId'));\r",
							"    pm.expect(spot.identifier).to.eql(pm.variables.get('parkingSpotIdentifier'));\r",
							"    pm.expect(spot.carParkFloor).to.eql(pm.variables.get('carParkFloorIdentifier'));\r",
							"    pm.expect(spot.carPark).to.eql(pm.variables.get('carParkId'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/carparks/{{carParkId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carparks",
						"{{carParkId}}"
					]
				}
			},
			"response": [
				{
					"name": "Car park was found and returned",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/carparks/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carparks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "34798759",
									"description": "(Required) id of the car park"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": 29841333,\n  \"name\": \"voluptate aute\",\n  \"address\": \"nulla\",\n  \"prices\": 23509364.03920953,\n  \"floors\": [\n    {\n      \"id\": 21058194,\n      \"identifier\": \"quis ad ea est\",\n      \"carPark\": 20057293,\n      \"spots\": [\n        {\n          \"id\": -43910668,\n          \"identifier\": \"eu sunt\",\n          \"carParkFloor\": \"elit veniam in est magna\",\n          \"carPark\": -4267909,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        {\n          \"id\": -81692092,\n          \"identifier\": \"labore aliquip sed dolor\",\n          \"carParkFloor\": \"occaecat velit consectetur cul\",\n          \"carPark\": -6019994,\n          \"free\": false,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"id\": 71324176,\n      \"identifier\": \"ex ut\",\n      \"carPark\": -71078999,\n      \"spots\": [\n        {\n          \"id\": 8496469,\n          \"identifier\": \"velit anim\",\n          \"carParkFloor\": \"ut ipsum cillum in adipisicing\",\n          \"carPark\": -12040139,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        {\n          \"id\": -63826307,\n          \"identifier\": \"cupidatat dolor\",\n          \"carParkFloor\": \"nostrud\",\n          \"carPark\": 73544789,\n          \"free\": true,\n          \"type\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"reservations\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}"
				},
				{
					"name": "Car park with id not found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/carparks/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carparks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "34798759",
									"description": "(Required) id of the car park"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get car park floor that belongs to car park with given id and has given identifier Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('getCarParkFloorWithIdentifier', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.identifier).to.eql(pm.variables.get('carParkFloorIdentifier'));\r",
							"    pm.expect(jsonResponse.carPark).to.eql(pm.variables.get('carParkId'));\r",
							"    pm.expect(jsonResponse.id).to.eql(pm.variables.get('carParkFloorId'));\r",
							"\r",
							"    pm.expect(jsonResponse.spots).to.be.an('array');\r",
							"    pm.expect(jsonResponse.spots.length).to.eql(1);\r",
							"\r",
							"    const spot = jsonResponse.spots[0];\r",
							"    pm.expect(spot.id).to.be.a('number');\r",
							"    pm.expect(spot.id).to.eql(pm.variables.get('parkingSpotId'));\r",
							"    pm.expect(spot.identifier).to.eql(pm.variables.get('parkingSpotIdentifier'));\r",
							"    pm.expect(spot.carParkFloor).to.eql(pm.variables.get('carParkFloorIdentifier'));\r",
							"    pm.expect(spot.carPark).to.eql(pm.variables.get('carParkId'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/carparkfloors/{{carParkFloorId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carparkfloors",
						"{{carParkFloorId}}"
					]
				}
			},
			"response": [
				{
					"name": "Car park floor found and returned",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/carparks/:id/floors/:identifier",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carparks",
								":id",
								"floors",
								":identifier"
							],
							"variable": [
								{
									"key": "id",
									"value": "-41690012",
									"description": "(Required) Id of car park"
								},
								{
									"key": "identifier",
									"value": "Lorem exercitation",
									"description": "(Required) Identifier of the car park floor"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": -197500,\n  \"identifier\": \"Duis minim\",\n  \"carPark\": -59937740,\n  \"spots\": [\n    {\n      \"id\": 62605831,\n      \"identifier\": \"elit do aliqua nulla\",\n      \"carParkFloor\": \"ut dolor\",\n      \"carPark\": 79136081,\n      \"free\": true,\n      \"type\": {\n        \"value\": \"reference CarType not found in the OpenAPI spec\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -74883988,\n          \"start\": \"cupidatat nulla Lorem officia\",\n          \"end\": \"do in\",\n          \"prices\": -15915794.476489961,\n          \"car\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"brand\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"model\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vrp\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"owner\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"colour\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"spot\": {\n            \"id\": -56282731\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": -29088549,\n          \"start\": \"Lorem aute tempor conse\",\n          \"end\": \"veniam\",\n          \"prices\": -54261820.31842992,\n          \"car\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"brand\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"model\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vrp\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"owner\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"colour\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"spot\": {\n            \"id\": -35774932\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"id\": 78747466,\n      \"identifier\": \"mollit dolore\",\n      \"carParkFloor\": \"aliqua non eiusmod\",\n      \"carPark\": -80051847,\n      \"free\": true,\n      \"type\": {\n        \"value\": \"reference CarType not found in the OpenAPI spec\"\n      },\n      \"reservations\": [\n        {\n          \"id\": 56303109,\n          \"start\": \"ex adipisicing consectetur dolor\",\n          \"end\": \"eu dolore\",\n          \"prices\": 74041609.68623126,\n          \"car\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"brand\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"model\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vrp\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"owner\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"colour\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"spot\": {\n            \"id\": -38927040\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": 40287087,\n          \"start\": \"Lorem laboris\",\n          \"end\": \"tempor laborum sint nostrud\",\n          \"prices\": 62247619.30249056,\n          \"car\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"brand\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"model\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vrp\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"owner\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"colour\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"spot\": {\n            \"id\": 24204263\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}"
				},
				{
					"name": "Car park with given id was not found or car park floor with given identifier for given car park was not found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/carparks/:id/floors/:identifier",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carparks",
								":id",
								"floors",
								":identifier"
							],
							"variable": [
								{
									"key": "id",
									"value": "-41690012",
									"description": "(Required) Id of car park"
								},
								{
									"key": "identifier",
									"value": "Lorem exercitation",
									"description": "(Required) Identifier of the car park floor"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get parking spot by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('getParkingSpotWithoutType', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.expect(jsonResponse.identifier).to.eql(pm.variables.get('parkingSpotIdentifier'));\r",
							"    pm.expect(jsonResponse.free).to.be.a('boolean');\r",
							"    pm.expect(jsonResponse.free).to.eql(true);\r",
							"    pm.expect(jsonResponse.id).to.eql(pm.variables.get('parkingSpotId'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/parkingspots/{{parkingSpotId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"parkingspots",
						"{{parkingSpotId}}"
					]
				}
			},
			"response": [
				{
					"name": "Parking spot exists and is returned",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/parkingSpots/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"parkingSpots",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "82505515",
									"description": "(Required) Id of parking spot"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": -81535452,\n  \"identifier\": \"proident amet commodo magna Ut\",\n  \"carParkFloor\": \"laborum occaecat non laboris\",\n  \"carPark\": 24470527,\n  \"free\": true,\n  \"type\": {\n    \"id\": -94805171,\n    \"name\": \"sunt eiusmod\"\n  },\n  \"reservations\": [\n    {\n      \"id\": 12206372,\n      \"start\": \"proident incididunt\",\n      \"end\": \"ea\",\n      \"prices\": -56350184.84567729,\n      \"car\": {\n        \"id\": 62475853,\n        \"brand\": \"consectetur pariatur Duis\",\n        \"model\": \"nostrud et sint Duis \",\n        \"vrp\": \"laboris Lorem\",\n        \"owner\": {\n          \"id\": -43719153,\n          \"firstName\": \"ut\",\n          \"lastName\": \"ad ea magna non\",\n          \"email\": \"cupidatat ad ve\",\n          \"cars\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"colour\": \"Ut\",\n        \"type\": {\n          \"id\": -71379042,\n          \"name\": \"esse ipsum\"\n        },\n        \"reservations\": [\n          {\n            \"id\": 60445860\n          },\n          {\n            \"id\": -8985920\n          }\n        ]\n      },\n      \"spot\": {\n        \"id\": 53969607\n      },\n      \"coupon\": {\n        \"id\": -34623044,\n        \"name\": \"velit ad occaecat Ut dolore\",\n        \"discount\": 78624237.43919912\n      }\n    },\n    {\n      \"id\": -30163995,\n      \"start\": \"sed velit\",\n      \"end\": \"ea minim\",\n      \"prices\": 66273757.72397879,\n      \"car\": {\n        \"id\": -5006518,\n        \"brand\": \"et dolore Lorem\",\n        \"model\": \"minim reprehe\",\n        \"vrp\": \"elit do\",\n        \"owner\": {\n          \"id\": 86603550,\n          \"firstName\": \"anim do laborum\",\n          \"lastName\": \"dolore enim\",\n          \"email\": \"consectetur nulla sunt\",\n          \"cars\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"colour\": \"laborum dolor\",\n        \"type\": {\n          \"id\": -79657070,\n          \"name\": \"esse ut ea\"\n        },\n        \"reservations\": [\n          {\n            \"id\": -46712456\n          },\n          {\n            \"id\": -70327793\n          }\n        ]\n      },\n      \"spot\": {\n        \"id\": -95696970\n      },\n      \"coupon\": {\n        \"id\": -54693217,\n        \"name\": \"magna cupidatat\",\n        \"discount\": -30372284.73779945\n      }\n    }\n  ]\n}"
				},
				{
					"name": "Parking spot does not exist",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/parkingSpots/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"parkingSpots",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "82505515",
									"description": "(Required) Id of parking spot"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{auth_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{auth_name}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:8080/api",
			"type": "string"
		},
		{
			"key": "carParkId",
			"value": ""
		}
	]
}