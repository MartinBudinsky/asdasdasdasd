{
	"info": {
		"_postman_id": "bd8b0c10-ff17-43bc-a8c1-1587041845f8",
		"name": "getAllCarsWithoutType",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3466389"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('createUser', function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.expect(jsonResponse.firstName).to.eql(pm.variables.get('userFirstName'));\r",
							"    pm.expect(jsonResponse.lastName).to.eql(pm.variables.get('userLastName'));\r",
							"    pm.expect(jsonResponse.email).to.eql(pm.variables.get('userEmail'));\r",
							"    pm.variables.set('userId', jsonResponse.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": -92119638,\n  \"firstName\": \"{{userFirstName}}\",\n  \"lastName\": \"{{userLastName}}\",\n  \"email\": \"{{userEmail}}\",\n  \"cars\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": [
				{
					"name": "User created and returned",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -72264117,\n  \"firstName\": \"irure nulla\",\n  \"lastName\": \"ut consequat Duis qui cillum\",\n  \"email\": \"et ut pariatur\",\n  \"cars\": [\n    {\n      \"id\": -81747328,\n      \"brand\": \"est anim laborum labore\",\n      \"model\": \"mollit officia ut aliqua\",\n      \"vrp\": \"c\",\n      \"owner\": {\n        \"id\": 14826273\n      },\n      \"colour\": \"pariatur anim occaecat\",\n      \"type\": {\n        \"id\": 99526371,\n        \"name\": \"minim Lorem\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -10596357,\n          \"start\": \"sit anim tempor\",\n          \"end\": \"dolore dolore aute eiusmod dolor\",\n          \"prices\": -35079603.505345605,\n          \"car\": {\n            \"id\": 75018569\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": 70010001,\n          \"start\": \"Excepteur nisi tempor anim\",\n          \"end\": \"in Excepteur ex velit\",\n          \"prices\": 99265450.71166006,\n          \"car\": {\n            \"id\": -9932311\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"id\": 23887955,\n      \"brand\": \"aute fugiat\",\n      \"model\": \"nostrud\",\n      \"vrp\": \"ut laborum et ex non\",\n      \"owner\": {\n        \"id\": 29731614\n      },\n      \"colour\": \"cillum adipisicing non irure aliquip\",\n      \"type\": {\n        \"id\": 41486313,\n        \"name\": \"Duis in\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -61009277,\n          \"start\": \"Duis enim ea consectetur\",\n          \"end\": \"sit veniam\",\n          \"prices\": -77155595.16935691,\n          \"car\": {\n            \"id\": -91996539\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": -20479316,\n          \"start\": \"qui nisi\",\n          \"end\": \"in\",\n          \"prices\": 48064079.05059403,\n          \"car\": {\n            \"id\": 62994433\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": -72264117,\n  \"firstName\": \"irure nulla\",\n  \"lastName\": \"ut consequat Duis qui cillum\",\n  \"email\": \"et ut pariatur\",\n  \"cars\": [\n    {\n      \"id\": -81747328,\n      \"brand\": \"est anim laborum labore\",\n      \"model\": \"mollit officia ut aliqua\",\n      \"vrp\": \"c\",\n      \"owner\": {\n        \"id\": 14826273\n      },\n      \"colour\": \"pariatur anim occaecat\",\n      \"type\": {\n        \"id\": 99526371,\n        \"name\": \"minim Lorem\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -10596357,\n          \"start\": \"sit anim tempor\",\n          \"end\": \"dolore dolore aute eiusmod dolor\",\n          \"prices\": -35079603.505345605,\n          \"car\": {\n            \"id\": 75018569\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": 70010001,\n          \"start\": \"Excepteur nisi tempor anim\",\n          \"end\": \"in Excepteur ex velit\",\n          \"prices\": 99265450.71166006,\n          \"car\": {\n            \"id\": -9932311\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"id\": 23887955,\n      \"brand\": \"aute fugiat\",\n      \"model\": \"nostrud\",\n      \"vrp\": \"ut laborum et ex non\",\n      \"owner\": {\n        \"id\": 29731614\n      },\n      \"colour\": \"cillum adipisicing non irure aliquip\",\n      \"type\": {\n        \"id\": 41486313,\n        \"name\": \"Duis in\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -61009277,\n          \"start\": \"Duis enim ea consectetur\",\n          \"end\": \"sit veniam\",\n          \"prices\": -77155595.16935691,\n          \"car\": {\n            \"id\": -91996539\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": -20479316,\n          \"start\": \"qui nisi\",\n          \"end\": \"in\",\n          \"prices\": 48064079.05059403,\n          \"car\": {\n            \"id\": 62994433\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}"
				},
				{
					"name": "Incorrectly formed request body",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -72264117,\n  \"firstName\": \"irure nulla\",\n  \"lastName\": \"ut consequat Duis qui cillum\",\n  \"email\": \"et ut pariatur\",\n  \"cars\": [\n    {\n      \"id\": -81747328,\n      \"brand\": \"est anim laborum labore\",\n      \"model\": \"mollit officia ut aliqua\",\n      \"vrp\": \"c\",\n      \"owner\": {\n        \"id\": 14826273\n      },\n      \"colour\": \"pariatur anim occaecat\",\n      \"type\": {\n        \"id\": 99526371,\n        \"name\": \"minim Lorem\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -10596357,\n          \"start\": \"sit anim tempor\",\n          \"end\": \"dolore dolore aute eiusmod dolor\",\n          \"prices\": -35079603.505345605,\n          \"car\": {\n            \"id\": 75018569\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": 70010001,\n          \"start\": \"Excepteur nisi tempor anim\",\n          \"end\": \"in Excepteur ex velit\",\n          \"prices\": 99265450.71166006,\n          \"car\": {\n            \"id\": -9932311\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"id\": 23887955,\n      \"brand\": \"aute fugiat\",\n      \"model\": \"nostrud\",\n      \"vrp\": \"ut laborum et ex non\",\n      \"owner\": {\n        \"id\": 29731614\n      },\n      \"colour\": \"cillum adipisicing non irure aliquip\",\n      \"type\": {\n        \"id\": 41486313,\n        \"name\": \"Duis in\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -61009277,\n          \"start\": \"Duis enim ea consectetur\",\n          \"end\": \"sit veniam\",\n          \"prices\": -77155595.16935691,\n          \"car\": {\n            \"id\": -91996539\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": -20479316,\n          \"start\": \"qui nisi\",\n          \"end\": \"in\",\n          \"prices\": 48064079.05059403,\n          \"car\": {\n            \"id\": 62994433\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Create car",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('createCar', function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.expect(jsonResponse.brand).to.eql(pm.variables.get('carBrand'));\r",
							"    pm.expect(jsonResponse.model).to.eql(pm.variables.get('carModel'));\r",
							"    pm.expect(jsonResponse.vrp).to.eql(pm.variables.get('carVrp'));\r",
							"    pm.expect(jsonResponse.colour).to.eql(pm.variables.get('carColor'));\r",
							"    pm.variables.set('carId', jsonResponse.id);\r",
							"    \r",
							"    const owner = jsonResponse.owner;\r",
							"    if (typeof owner === 'number') {\r",
							"        pm.expect(owner).to.be.eql(pm.variables.get('userId'));\r",
							"    } else if (typeof owner === 'object') {\r",
							"        pm.expect(owner.id).to.be.eql(pm.variables.get('userId'));\r",
							"        if (owner.firstName != undefined) {\r",
							"            pm.expect(owner.firstName).to.be.eql(pm.variables.get('userFirstName'));\r",
							"        }\r",
							"        if (owner.lastName != undefined) {\r",
							"            pm.expect(owner.lastName).to.be.eql(pm.variables.get('userLastName'));\r",
							"        }\r",
							"        if (owner.email != undefined) {\r",
							"            pm.expect(owner.email).to.be.eql(pm.variables.get('userEmail'));\r",
							"        }\r",
							"    }\r",
							"    \r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": -47280362,\n  \"brand\": \"{{carBrand}}\",\n  \"model\": \"{{carModel}}\",\n  \"vrp\": \"{{carVrp}}\",\n  \"owner\": {\n    \"id\": {{userId}},\n    \"firstName\": \"{{userFirstName}}\",\n    \"lastName\": \"{{userLastName}}\",\n    \"email\": \"{{userEmail}}\",\n    \"cars\": []\n  },\n  \"colour\": \"{{carColor}}\",\n  \"reservations\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cars",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cars"
					]
				}
			},
			"response": [
				{
					"name": "Car created and returned",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -47280362,\n  \"brand\": \"proident consectetur dolor deserunt\",\n  \"model\": \"dolor consectetur et sed\",\n  \"vrp\": \"nulla ullamco\",\n  \"owner\": {\n    \"id\": -9071566,\n    \"firstName\": \"nulla\",\n    \"lastName\": \"voluptate id n\",\n    \"email\": \"non culpa\",\n    \"cars\": [\n      {\n        \"id\": 67536605\n      },\n      {\n        \"id\": -32548525\n      }\n    ]\n  },\n  \"colour\": \"enim officia\",\n  \"type\": {\n    \"id\": 68623669,\n    \"name\": \"ut\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": -47280362,\n  \"brand\": \"proident consectetur dolor deserunt\",\n  \"model\": \"dolor consectetur et sed\",\n  \"vrp\": \"nulla ullamco\",\n  \"owner\": {\n    \"id\": -9071566,\n    \"firstName\": \"nulla\",\n    \"lastName\": \"voluptate id n\",\n    \"email\": \"non culpa\",\n    \"cars\": [\n      {\n        \"id\": 67536605\n      },\n      {\n        \"id\": -32548525\n      }\n    ]\n  },\n  \"colour\": \"enim officia\",\n  \"type\": {\n    \"id\": 68623669,\n    \"name\": \"ut\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}"
				},
				{
					"name": "Incorrectly formed request body",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -47280362,\n  \"brand\": \"proident consectetur dolor deserunt\",\n  \"model\": \"dolor consectetur et sed\",\n  \"vrp\": \"nulla ullamco\",\n  \"owner\": {\n    \"id\": -9071566,\n    \"firstName\": \"nulla\",\n    \"lastName\": \"voluptate id n\",\n    \"email\": \"non culpa\",\n    \"cars\": [\n      {\n        \"id\": 67536605\n      },\n      {\n        \"id\": -32548525\n      }\n    ]\n  },\n  \"colour\": \"enim officia\",\n  \"type\": {\n    \"id\": 68623669,\n    \"name\": \"ut\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Create car2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('createCar2', function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.variables.set('carId2', jsonResponse.id);\r",
							"    pm.expect(jsonResponse.brand).to.eql(pm.variables.get('carBrand2'));\r",
							"    pm.expect(jsonResponse.model).to.eql(pm.variables.get('carModel2'));\r",
							"    pm.expect(jsonResponse.vrp).to.eql(pm.variables.get('carVrp2'));\r",
							"    pm.expect(jsonResponse.colour).to.eql(pm.variables.get('carColor2'));\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 465454645,\n  \"brand\": \"{{carBrand2}}\",\n  \"model\": \"{{carModel2}}\",\n  \"vrp\": \"{{carVrp2}}\",\n  \"owner\": {\n    \"id\": {{userId}},\n    \"firstName\": \"{{userFirstName}}\",\n    \"lastName\": \"{{userLastName}}\",\n    \"email\": \"{{userEmail}}\",\n    \"cars\": []\n  },\n  \"colour\": \"{{carColor2}}\",\n  \"reservations\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cars",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cars"
					]
				}
			},
			"response": [
				{
					"name": "Car was created and returned",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -9134224,\n  \"brand\": \"ea est id\",\n  \"model\": \"dolore in Lorem quis\",\n  \"vrp\": \"in reprehenderit sint paria\",\n  \"owner\": {\n    \"id\": 53982564,\n    \"firstName\": \"ipsum in do\",\n    \"lastName\": \"labore non esse\",\n    \"email\": \"sunt magna reprehenderit fugi\",\n    \"cars\": [\n      {\n        \"id\": -26289911\n      },\n      {\n        \"id\": -1426749\n      }\n    ]\n  },\n  \"colour\": \"sit sint\",\n  \"type\": {\n    \"id\": -1826520,\n    \"name\": \"reprehenderit\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "14353783",
									"description": "(Required) Id of car"
								}
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": -9134224,\n  \"brand\": \"ea est id\",\n  \"model\": \"dolore in Lorem quis\",\n  \"vrp\": \"in reprehenderit sint paria\",\n  \"owner\": {\n    \"id\": 53982564,\n    \"firstName\": \"ipsum in do\",\n    \"lastName\": \"labore non esse\",\n    \"email\": \"sunt magna reprehenderit fugi\",\n    \"cars\": [\n      {\n        \"id\": -26289911\n      },\n      {\n        \"id\": -1426749\n      }\n    ]\n  },\n  \"colour\": \"sit sint\",\n  \"type\": {\n    \"id\": -1826520,\n    \"name\": \"reprehenderit\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}"
				},
				{
					"name": "Incorrectly formed request body",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -9134224,\n  \"brand\": \"ea est id\",\n  \"model\": \"dolore in Lorem quis\",\n  \"vrp\": \"in reprehenderit sint paria\",\n  \"owner\": {\n    \"id\": 53982564,\n    \"firstName\": \"ipsum in do\",\n    \"lastName\": \"labore non esse\",\n    \"email\": \"sunt magna reprehenderit fugi\",\n    \"cars\": [\n      {\n        \"id\": -26289911\n      },\n      {\n        \"id\": -1426749\n      }\n    ]\n  },\n  \"colour\": \"sit sint\",\n  \"type\": {\n    \"id\": -1826520,\n    \"name\": \"reprehenderit\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "14353783",
									"description": "(Required) Id of car"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Car was not found",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -9134224,\n  \"brand\": \"ea est id\",\n  \"model\": \"dolore in Lorem quis\",\n  \"vrp\": \"in reprehenderit sint paria\",\n  \"owner\": {\n    \"id\": 53982564,\n    \"firstName\": \"ipsum in do\",\n    \"lastName\": \"labore non esse\",\n    \"email\": \"sunt magna reprehenderit fugi\",\n    \"cars\": [\n      {\n        \"id\": -26289911\n      },\n      {\n        \"id\": -1426749\n      }\n    ]\n  },\n  \"colour\": \"sit sint\",\n  \"type\": {\n    \"id\": -1826520,\n    \"name\": \"reprehenderit\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "14353783",
									"description": "(Required) Id of car"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Create user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('createUser2', function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.expect(jsonResponse.firstName).to.eql(pm.variables.get('userFirstName2'));\r",
							"    pm.expect(jsonResponse.lastName).to.eql(pm.variables.get('userLastName2'));\r",
							"    pm.expect(jsonResponse.email).to.eql(pm.variables.get('userEmail2'));\r",
							"    pm.variables.set('userId2', jsonResponse.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": -358214,\n  \"firstName\": \"{{userFirstName2}}\",\n  \"lastName\": \"{{userLastName2}}\",\n  \"email\": \"{{userEmail2}}\",\n  \"cars\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": [
				{
					"name": "User created and returned",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -72264117,\n  \"firstName\": \"irure nulla\",\n  \"lastName\": \"ut consequat Duis qui cillum\",\n  \"email\": \"et ut pariatur\",\n  \"cars\": [\n    {\n      \"id\": -81747328,\n      \"brand\": \"est anim laborum labore\",\n      \"model\": \"mollit officia ut aliqua\",\n      \"vrp\": \"c\",\n      \"owner\": {\n        \"id\": 14826273\n      },\n      \"colour\": \"pariatur anim occaecat\",\n      \"type\": {\n        \"id\": 99526371,\n        \"name\": \"minim Lorem\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -10596357,\n          \"start\": \"sit anim tempor\",\n          \"end\": \"dolore dolore aute eiusmod dolor\",\n          \"prices\": -35079603.505345605,\n          \"car\": {\n            \"id\": 75018569\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": 70010001,\n          \"start\": \"Excepteur nisi tempor anim\",\n          \"end\": \"in Excepteur ex velit\",\n          \"prices\": 99265450.71166006,\n          \"car\": {\n            \"id\": -9932311\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"id\": 23887955,\n      \"brand\": \"aute fugiat\",\n      \"model\": \"nostrud\",\n      \"vrp\": \"ut laborum et ex non\",\n      \"owner\": {\n        \"id\": 29731614\n      },\n      \"colour\": \"cillum adipisicing non irure aliquip\",\n      \"type\": {\n        \"id\": 41486313,\n        \"name\": \"Duis in\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -61009277,\n          \"start\": \"Duis enim ea consectetur\",\n          \"end\": \"sit veniam\",\n          \"prices\": -77155595.16935691,\n          \"car\": {\n            \"id\": -91996539\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": -20479316,\n          \"start\": \"qui nisi\",\n          \"end\": \"in\",\n          \"prices\": 48064079.05059403,\n          \"car\": {\n            \"id\": 62994433\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": -72264117,\n  \"firstName\": \"irure nulla\",\n  \"lastName\": \"ut consequat Duis qui cillum\",\n  \"email\": \"et ut pariatur\",\n  \"cars\": [\n    {\n      \"id\": -81747328,\n      \"brand\": \"est anim laborum labore\",\n      \"model\": \"mollit officia ut aliqua\",\n      \"vrp\": \"c\",\n      \"owner\": {\n        \"id\": 14826273\n      },\n      \"colour\": \"pariatur anim occaecat\",\n      \"type\": {\n        \"id\": 99526371,\n        \"name\": \"minim Lorem\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -10596357,\n          \"start\": \"sit anim tempor\",\n          \"end\": \"dolore dolore aute eiusmod dolor\",\n          \"prices\": -35079603.505345605,\n          \"car\": {\n            \"id\": 75018569\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": 70010001,\n          \"start\": \"Excepteur nisi tempor anim\",\n          \"end\": \"in Excepteur ex velit\",\n          \"prices\": 99265450.71166006,\n          \"car\": {\n            \"id\": -9932311\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"id\": 23887955,\n      \"brand\": \"aute fugiat\",\n      \"model\": \"nostrud\",\n      \"vrp\": \"ut laborum et ex non\",\n      \"owner\": {\n        \"id\": 29731614\n      },\n      \"colour\": \"cillum adipisicing non irure aliquip\",\n      \"type\": {\n        \"id\": 41486313,\n        \"name\": \"Duis in\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -61009277,\n          \"start\": \"Duis enim ea consectetur\",\n          \"end\": \"sit veniam\",\n          \"prices\": -77155595.16935691,\n          \"car\": {\n            \"id\": -91996539\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": -20479316,\n          \"start\": \"qui nisi\",\n          \"end\": \"in\",\n          \"prices\": 48064079.05059403,\n          \"car\": {\n            \"id\": 62994433\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}"
				},
				{
					"name": "Incorrectly formed request body",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -72264117,\n  \"firstName\": \"irure nulla\",\n  \"lastName\": \"ut consequat Duis qui cillum\",\n  \"email\": \"et ut pariatur\",\n  \"cars\": [\n    {\n      \"id\": -81747328,\n      \"brand\": \"est anim laborum labore\",\n      \"model\": \"mollit officia ut aliqua\",\n      \"vrp\": \"c\",\n      \"owner\": {\n        \"id\": 14826273\n      },\n      \"colour\": \"pariatur anim occaecat\",\n      \"type\": {\n        \"id\": 99526371,\n        \"name\": \"minim Lorem\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -10596357,\n          \"start\": \"sit anim tempor\",\n          \"end\": \"dolore dolore aute eiusmod dolor\",\n          \"prices\": -35079603.505345605,\n          \"car\": {\n            \"id\": 75018569\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": 70010001,\n          \"start\": \"Excepteur nisi tempor anim\",\n          \"end\": \"in Excepteur ex velit\",\n          \"prices\": 99265450.71166006,\n          \"car\": {\n            \"id\": -9932311\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"id\": 23887955,\n      \"brand\": \"aute fugiat\",\n      \"model\": \"nostrud\",\n      \"vrp\": \"ut laborum et ex non\",\n      \"owner\": {\n        \"id\": 29731614\n      },\n      \"colour\": \"cillum adipisicing non irure aliquip\",\n      \"type\": {\n        \"id\": 41486313,\n        \"name\": \"Duis in\"\n      },\n      \"reservations\": [\n        {\n          \"id\": -61009277,\n          \"start\": \"Duis enim ea consectetur\",\n          \"end\": \"sit veniam\",\n          \"prices\": -77155595.16935691,\n          \"car\": {\n            \"id\": -91996539\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"id\": -20479316,\n          \"start\": \"qui nisi\",\n          \"end\": \"in\",\n          \"prices\": 48064079.05059403,\n          \"car\": {\n            \"id\": 62994433\n          },\n          \"spot\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"identifier\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carParkFloor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"carPark\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"free\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"reservations\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"coupon\": {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"discount\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Create car3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('createCar3', function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.variables.set('carId3', jsonResponse.id);\r",
							"    pm.expect(jsonResponse.brand).to.eql(pm.variables.get('carBrand3'));\r",
							"    pm.expect(jsonResponse.model).to.eql(pm.variables.get('carModel3'));\r",
							"    pm.expect(jsonResponse.vrp).to.eql(pm.variables.get('carVrp3'));\r",
							"    pm.expect(jsonResponse.colour).to.eql(pm.variables.get('carColor3'));\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 465454645,\n  \"brand\": \"{{carBrand3}}\",\n  \"model\": \"{{carModel3}}\",\n  \"vrp\": \"{{carVrp3}}\",\n  \"owner\": {\n    \"id\": {{userId2}},\n    \"firstName\": \"{{userFirstName2}}\",\n    \"lastName\": \"{{userLastName2}}\",\n    \"email\": \"{{userEmail2}}\",\n    \"cars\": []\n  },\n  \"colour\": \"{{carColor3}}\",\n  \"reservations\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cars",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cars"
					]
				}
			},
			"response": [
				{
					"name": "Car was created and returned",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -9134224,\n  \"brand\": \"ea est id\",\n  \"model\": \"dolore in Lorem quis\",\n  \"vrp\": \"in reprehenderit sint paria\",\n  \"owner\": {\n    \"id\": 53982564,\n    \"firstName\": \"ipsum in do\",\n    \"lastName\": \"labore non esse\",\n    \"email\": \"sunt magna reprehenderit fugi\",\n    \"cars\": [\n      {\n        \"id\": -26289911\n      },\n      {\n        \"id\": -1426749\n      }\n    ]\n  },\n  \"colour\": \"sit sint\",\n  \"type\": {\n    \"id\": -1826520,\n    \"name\": \"reprehenderit\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "14353783",
									"description": "(Required) Id of car"
								}
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": -9134224,\n  \"brand\": \"ea est id\",\n  \"model\": \"dolore in Lorem quis\",\n  \"vrp\": \"in reprehenderit sint paria\",\n  \"owner\": {\n    \"id\": 53982564,\n    \"firstName\": \"ipsum in do\",\n    \"lastName\": \"labore non esse\",\n    \"email\": \"sunt magna reprehenderit fugi\",\n    \"cars\": [\n      {\n        \"id\": -26289911\n      },\n      {\n        \"id\": -1426749\n      }\n    ]\n  },\n  \"colour\": \"sit sint\",\n  \"type\": {\n    \"id\": -1826520,\n    \"name\": \"reprehenderit\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}"
				},
				{
					"name": "Incorrectly formed request body",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -9134224,\n  \"brand\": \"ea est id\",\n  \"model\": \"dolore in Lorem quis\",\n  \"vrp\": \"in reprehenderit sint paria\",\n  \"owner\": {\n    \"id\": 53982564,\n    \"firstName\": \"ipsum in do\",\n    \"lastName\": \"labore non esse\",\n    \"email\": \"sunt magna reprehenderit fugi\",\n    \"cars\": [\n      {\n        \"id\": -26289911\n      },\n      {\n        \"id\": -1426749\n      }\n    ]\n  },\n  \"colour\": \"sit sint\",\n  \"type\": {\n    \"id\": -1826520,\n    \"name\": \"reprehenderit\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "14353783",
									"description": "(Required) Id of car"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Car was not found",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -9134224,\n  \"brand\": \"ea est id\",\n  \"model\": \"dolore in Lorem quis\",\n  \"vrp\": \"in reprehenderit sint paria\",\n  \"owner\": {\n    \"id\": 53982564,\n    \"firstName\": \"ipsum in do\",\n    \"lastName\": \"labore non esse\",\n    \"email\": \"sunt magna reprehenderit fugi\",\n    \"cars\": [\n      {\n        \"id\": -26289911\n      },\n      {\n        \"id\": -1426749\n      }\n    ]\n  },\n  \"colour\": \"sit sint\",\n  \"type\": {\n    \"id\": -1826520,\n    \"name\": \"reprehenderit\"\n  },\n  \"reservations\": [\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "14353783",
									"description": "(Required) Id of car"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Return cars",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('getAllCars', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse).to.be.an('array');\r",
							"    pm.expect(jsonResponse.length).to.eql(3);\r",
							"\r",
							"    const car1 = jsonResponse[0];\r",
							"    const car2 = jsonResponse[1];\r",
							"    const car3 = jsonResponse[2];\r",
							"\r",
							"    console.log(car1.owner);\r",
							"    console.log(car2.owner);\r",
							"    console.log(car3.owner);\r",
							"    console.log('carIds');\r",
							"    console.log(car1.id);\r",
							"    console.log(car2.id);\r",
							"    console.log(car3.id);\r",
							"\r",
							"    console.log('carIdVariables');\r",
							"    console.log(pm.variables.get('carId'));\r",
							"    console.log(pm.variables.get('carId2'));\r",
							"    console.log(pm.variables.get('carId3'));\r",
							"\r",
							"    console.log('userIds');\r",
							"    console.log(pm.variables.get('userId'));\r",
							"    console.log(pm.variables.get('userId2'));\r",
							"\r",
							"    if (car1.id == pm.variables.get('carId')) {\r",
							"\r",
							"        pm.expect(car1.brand).to.eql(pm.variables.get('carBrand'));\r",
							"        pm.expect(car1.model).to.eql(pm.variables.get('carModel'));\r",
							"        pm.expect(car1.vrp).to.eql(pm.variables.get('carVrp'));\r",
							"        pm.expect(car1.colour).to.eql(pm.variables.get('carColor'));\r",
							"\r",
							"        if (typeof car1.owner == 'number') {\r",
							"            console.log(car1.owner);\r",
							"            pm.expect(car1.owner).to.eql(pm.variables.get('userId'));\r",
							"        \r",
							"        } else {\r",
							"            pm.expect(car1.owner.id).to.be.a('number');\r",
							"            pm.expect(car1.owner.id).to.eql(pm.variables.get('userId'));\r",
							"        }\r",
							"\r",
							"        if (car2.id == pm.variables.get('carId2')) {\r",
							"\r",
							"            pm.expect(car2.brand).to.eql(pm.variables.get('carBrand2'));\r",
							"            pm.expect(car2.model).to.eql(pm.variables.get('carModel2'));\r",
							"            pm.expect(car2.vrp).to.eql(pm.variables.get('carVrp2'));\r",
							"            pm.expect(car2.colour).to.eql(pm.variables.get('carColor2'));\r",
							"\r",
							"            pm.expect(car3.id).to.eql(pm.variables.get('carId3'));\r",
							"            pm.expect(car3.brand).to.eql(pm.variables.get('carBrand3'));\r",
							"            pm.expect(car3.model).to.eql(pm.variables.get('carModel3'));\r",
							"            pm.expect(car3.vrp).to.eql(pm.variables.get('carVrp3'));\r",
							"            pm.expect(car3.colour).to.eql(pm.variables.get('carColor3'));\r",
							"\r",
							"            if (typeof car2.owner == 'number') {\r",
							"                pm.expect(car2.owner).to.eql(pm.variables.get('userId'));\r",
							"                pm.expect(car3.owner).to.eql(pm.variables.get('userId2'));\r",
							"            } else {\r",
							"               \r",
							"                pm.expect(car2.owner.id).to.be.a('number');\r",
							"                pm.expect(car2.owner.id).to.eql(pm.variables.get('userId'));\r",
							"\r",
							"                pm.expect(car3.owner.id).to.be.a('number');\r",
							"                pm.expect(car3.owner.id).to.eql(pm.variables.get('userId2'));\r",
							"            }\r",
							"        } else {\r",
							"            pm.expect(car3.id).to.eql(pm.variables.get('carId2'));\r",
							"            pm.expect(car3.brand).to.eql(pm.variables.get('carBrand2'));\r",
							"            pm.expect(car3.model).to.eql(pm.variables.get('carModel2'));\r",
							"            pm.expect(car3.vrp).to.eql(pm.variables.get('carVrp2'));\r",
							"            pm.expect(car3.colour).to.eql(pm.variables.get('carColor2'));\r",
							"\r",
							"            pm.expect(car2.id).to.eql(pm.variables.get('carId3'));\r",
							"            pm.expect(car2.brand).to.eql(pm.variables.get('carBrand3'));\r",
							"            pm.expect(car2.model).to.eql(pm.variables.get('carModel3'));\r",
							"            pm.expect(car2.vrp).to.eql(pm.variables.get('carVrp3'));\r",
							"            pm.expect(car2.colour).to.eql(pm.variables.get('carColor3'));\r",
							"\r",
							"            if (typeof car2.owner == 'number') {\r",
							"                pm.expect(car2.owner).to.eql(pm.variables.get('userId2'));\r",
							"                pm.expect(car3.owner).to.eql(pm.variables.get('userId'));\r",
							"            } else {\r",
							"               \r",
							"                pm.expect(car2.owner.id).to.be.a('number');\r",
							"                pm.expect(car2.owner.id).to.eql(pm.variables.get('userId2'));\r",
							"\r",
							"                pm.expect(car3.owner.id).to.be.a('number');\r",
							"                pm.expect(car3.owner.id).to.eql(pm.variables.get('userId'));\r",
							"            }\r",
							"        }\r",
							"    } else if (car1.id == pm.variables.get('carId2')) {\r",
							"        pm.expect(car1.brand).to.eql(pm.variables.get('carBrand2'));\r",
							"        pm.expect(car1.model).to.eql(pm.variables.get('carModel2'));\r",
							"        pm.expect(car1.vrp).to.eql(pm.variables.get('carVrp2'));\r",
							"        pm.expect(car1.colour).to.eql(pm.variables.get('carColor2'));\r",
							"\r",
							"        if (typeof car1.owner == 'number') {\r",
							"            pm.expect(car1.owner).to.eql(pm.variables.get('userId2'));\r",
							"        } else {\r",
							"            pm.expect(car1.owner.id).to.be.a('number');\r",
							"            pm.expect(car1.owner.id).to.eql(pm.variables.get('userId'));\r",
							"        }\r",
							"\r",
							"        if (car2.id == pm.variables.get('carId')) {\r",
							"            pm.expect(car2.brand).to.eql(pm.variables.get('carBrand'));\r",
							"            pm.expect(car2.model).to.eql(pm.variables.get('carModel'));\r",
							"            pm.expect(car2.vrp).to.eql(pm.variables.get('carVrp'));\r",
							"            pm.expect(car2.colour).to.eql(pm.variables.get('carColor'));\r",
							"\r",
							"            pm.expect(car3.id).to.eql(pm.variables.get('carId3'));\r",
							"            pm.expect(car3.brand).to.eql(pm.variables.get('carBrand3'));\r",
							"            pm.expect(car3.model).to.eql(pm.variables.get('carModel3'));\r",
							"            pm.expect(car3.vrp).to.eql(pm.variables.get('carVrp3'));\r",
							"            pm.expect(car3.colour).to.eql(pm.variables.get('carColor3'));\r",
							"\r",
							"            if (typeof car2.owner == 'number') {\r",
							"                pm.expect(car2.owner).to.eql(pm.variables.get('userId'));\r",
							"                pm.expect(car3.owner).to.eql(pm.variables.get('userId2'));\r",
							"            } else {\r",
							"                pm.expect(car2.owner.id).to.be.a('number');\r",
							"                pm.expect(car2.owner.id).to.eql(pm.variables.get('userId'));\r",
							"\r",
							"                pm.expect(car3.owner.id).to.be.a('number');\r",
							"                pm.expect(car3.owner.id).to.eql(pm.variables.get('userId2'));\r",
							"            }\r",
							"        } else {\r",
							"            pm.expect(car2.brand).to.eql(pm.variables.get('carBrand3'));\r",
							"            pm.expect(car2.model).to.eql(pm.variables.get('carModel3'));\r",
							"            pm.expect(car2.vrp).to.eql(pm.variables.get('carVrp3'));\r",
							"            pm.expect(car2.colour).to.eql(pm.variables.get('carColor3'));\r",
							"\r",
							"            pm.expect(car3.id).to.eql(pm.variables.get('carId'));\r",
							"            pm.expect(car3.brand).to.eql(pm.variables.get('carBrand'));\r",
							"            pm.expect(car3.model).to.eql(pm.variables.get('carModel'));\r",
							"            pm.expect(car3.vrp).to.eql(pm.variables.get('carVrp'));\r",
							"            pm.expect(car3.colour).to.eql(pm.variables.get('carColor'));\r",
							"\r",
							"            if (typeof car2.owner == 'number') {\r",
							"                pm.expect(car2.owner).to.eql(pm.variables.get('userId2'));\r",
							"                pm.expect(car3.owner).to.eql(pm.variables.get('userId'));\r",
							"            } else {\r",
							"                pm.expect(car2.owner.id).to.be.a('number');\r",
							"                pm.expect(car2.owner.id).to.eql(pm.variables.get('userId2'));\r",
							"\r",
							"                pm.expect(car3.owner.id).to.be.a('number');\r",
							"                pm.expect(car3.owner.id).to.eql(pm.variables.get('userId'));\r",
							"            }\r",
							"        }\r",
							"    } else {\r",
							"        pm.expect(car1.id).to.eql(pm.variables.get('carId3'));\r",
							"        pm.expect(car1.brand).to.eql(pm.variables.get('carBrand3'));\r",
							"        pm.expect(car1.model).to.eql(pm.variables.get('carModel3'));\r",
							"        pm.expect(car1.vrp).to.eql(pm.variables.get('carVrp3'));\r",
							"        pm.expect(car1.colour).to.eql(pm.variables.get('carColor3'));\r",
							"\r",
							"        if (typeof car1.owner == 'number') {\r",
							"            pm.expect(car1.owner).to.eql(pm.variables.get('userId2'));\r",
							"        } else {\r",
							"            pm.expect(car1.owner.id).to.be.a('number');\r",
							"            pm.expect(car2.owner.id).to.eql(pm.variables.get('userId2'));\r",
							"        }\r",
							"\r",
							"        if (car2.id == pm.variables.get('carId2')) {\r",
							"            pm.expect(car2.brand).to.eql(pm.variables.get('carBrand2'));\r",
							"            pm.expect(car2.model).to.eql(pm.variables.get('carModel2'));\r",
							"            pm.expect(car2.vrp).to.eql(pm.variables.get('carVrp2'));\r",
							"            pm.expect(car2.colour).to.eql(pm.variables.get('carColor2'));\r",
							"\r",
							"            pm.expect(car3.id).to.eql(pm.variables.get('carId'));\r",
							"            pm.expect(car3.brand).to.eql(pm.variables.get('carBrand'));\r",
							"            pm.expect(car3.model).to.eql(pm.variables.get('carModel'));\r",
							"            pm.expect(car3.vrp).to.eql(pm.variables.get('carVrp'));\r",
							"            pm.expect(car3.colour).to.eql(pm.variables.get('carColor'));\r",
							"\r",
							"            if (typeof car2.owner == 'number') {\r",
							"                pm.expect(car2.owner).to.eql(pm.variables.get('userId'));\r",
							"                pm.expect(car3.owner).to.eql(pm.variables.get('userId'));\r",
							"            } else {\r",
							"                pm.expect(car2.owner.id).to.be.a('number');\r",
							"                pm.expect(car2.owner.id).to.eql(pm.variables.get('userId'));\r",
							"                pm.expect(car3.owner.id).to.be.a('number');\r",
							"                pm.expect(car3.owner.id).to.eql(pm.variables.get('userId'));\r",
							"            }\r",
							"        } else {\r",
							"            pm.expect(car3.id).to.eql(pm.variables.get('carId2'));\r",
							"            pm.expect(car3.brand).to.eql(pm.variables.get('carBrand2'));\r",
							"            pm.expect(car3.model).to.eql(pm.variables.get('carModel2'));\r",
							"            pm.expect(car3.vrp).to.eql(pm.variables.get('carVrp2'));\r",
							"            pm.expect(car3.colour).to.eql(pm.variables.get('carColor2'));\r",
							"\r",
							"            pm.expect(car2.id).to.eql(pm.variables.get('carId'));\r",
							"            pm.expect(car2.brand).to.eql(pm.variables.get('carBrand'));\r",
							"            pm.expect(car2.model).to.eql(pm.variables.get('carModel'));\r",
							"            pm.expect(car2.vrp).to.eql(pm.variables.get('carVrp'));\r",
							"            pm.expect(car2.colour).to.eql(pm.variables.get('carColor'));\r",
							"\r",
							"            if (typeof car2.owner == 'number') {\r",
							"                pm.expect(car2.owner).to.eql(pm.variables.get('userId'));\r",
							"                pm.expect(car3.owner).to.eql(pm.variables.get('userId'));\r",
							"            } else {\r",
							"                pm.expect(car2.owner.id).to.be.a('number');\r",
							"                pm.expect(car2.owner.id).to.eql(pm.variables.get('userId'));\r",
							"                pm.expect(car3.owner.id).to.be.a('number');\r",
							"                pm.expect(car3.owner.id).to.eql(pm.variables.get('userId'));\r",
							"            }\r",
							"        }\r",
							"\r",
							"        \r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/cars",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cars"
					]
				}
			},
			"response": [
				{
					"name": "Cars returned",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cars?user=3220906&vrp=enim magna",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars"
							],
							"query": [
								{
									"key": "user",
									"value": "3220906"
								},
								{
									"key": "vrp",
									"value": "enim magna"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n  {\n    \"id\": 58554596,\n    \"brand\": \"nulla ullamco sed exercitation magna\",\n    \"model\": \"est aute irure mollit\",\n    \"vrp\": \"incididunt i\",\n    \"owner\": {\n      \"id\": 93990886,\n      \"firstName\": \"et adipisicing dolore id dolor\",\n      \"lastName\": \"quis in culpa laboris\",\n      \"email\": \"eu commodo est cillum\",\n      \"cars\": [\n        {\n          \"id\": -52074236\n        },\n        {\n          \"id\": 36206073\n        }\n      ]\n    },\n    \"colour\": \"Duis exercitation commodo\",\n    \"type\": {\n      \"id\": 79847586,\n      \"name\": \"culpa proident Excepteur do\"\n    },\n    \"reservations\": [\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      },\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      }\n    ]\n  },\n  {\n    \"id\": -82245540,\n    \"brand\": \"ullamco\",\n    \"model\": \"sint voluptate in\",\n    \"vrp\": \"magna ullamco in aute pariatur\",\n    \"owner\": {\n      \"id\": 45400559,\n      \"firstName\": \"officia in dolor\",\n      \"lastName\": \"dolore labore nulla\",\n      \"email\": \"incididunt reprehenderit\",\n      \"cars\": [\n        {\n          \"id\": 22423658\n        },\n        {\n          \"id\": -35222652\n        }\n      ]\n    },\n    \"colour\": \"pariatur deserunt minim\",\n    \"type\": {\n      \"id\": 11832394,\n      \"name\": \"occaecat sed\"\n    },\n    \"reservations\": [\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      },\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      }\n    ]\n  }\n]"
				}
			]
		},
		{
			"name": "Return cars Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('getAllCarsForUserId', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse).to.be.an('array');\r",
							"    pm.expect(jsonResponse.length).to.eql(2);\r",
							"\r",
							"    const car1 = jsonResponse[0];\r",
							"    const car2 = jsonResponse[1];\r",
							"\r",
							"    if (car1.id == pm.variables.get('carId')) {\r",
							"\r",
							"        pm.expect(car1.brand).to.eql(pm.variables.get('carBrand'));\r",
							"        pm.expect(car1.model).to.eql(pm.variables.get('carModel'));\r",
							"        pm.expect(car1.vrp).to.eql(pm.variables.get('carVrp'));\r",
							"        pm.expect(car1.colour).to.eql(pm.variables.get('carColor'));\r",
							"\r",
							"        if (typeof car1.owner == 'number') {\r",
							"            pm.expect(car1.owner).to.eql(pm.variables.get('userId'));\r",
							"        } else {\r",
							"            pm.expect(car1.owner.id).to.be.a('number');\r",
							"            pm.expect(car1.owner.id).to.eql(pm.variables.get('userId'));\r",
							"        }\r",
							"\r",
							"        pm.expect(car2.id).to.eql(pm.variables.get('carId2'));\r",
							"        pm.expect(car2.brand).to.eql(pm.variables.get('carBrand2'));\r",
							"        pm.expect(car2.model).to.eql(pm.variables.get('carModel2'));\r",
							"        pm.expect(car2.vrp).to.eql(pm.variables.get('carVrp2'));\r",
							"        pm.expect(car2.colour).to.eql(pm.variables.get('carColor2'));\r",
							"\r",
							"        if (typeof car2.owner == 'number') {\r",
							"            pm.expect(car2.owner).to.eql(pm.variables.get('userId'));\r",
							"        } else {\r",
							"            \r",
							"            pm.expect(car2.owner.id).to.be.a('number');\r",
							"            pm.expect(car2.owner.id).to.eql(pm.variables.get('userId'));\r",
							"        }\r",
							"    } else {\r",
							"        pm.expect(car1.id).to.eql(pm.variables.get('carId2'));\r",
							"        pm.expect(car1.brand).to.eql(pm.variables.get('carBrand2'));\r",
							"        pm.expect(car1.model).to.eql(pm.variables.get('carModel2'));\r",
							"        pm.expect(car1.vrp).to.eql(pm.variables.get('carVrp2'));\r",
							"        pm.expect(car1.colour).to.eql(pm.variables.get('carColor2'));\r",
							"\r",
							"        if (typeof car1.owner == 'number') {\r",
							"            pm.expect(car1.owner).to.eql(pm.variables.get('userId'));\r",
							"        } else {\r",
							"            pm.expect(car1.owner.id).to.be.a('number');\r",
							"            pm.expect(car1.owner.id).to.eql(pm.variables.get('userId'));\r",
							"        }\r",
							"\r",
							"         pm.expect(car2.id).to.eql(pm.variables.get('carId'));\r",
							"        pm.expect(car2.brand).to.eql(pm.variables.get('carBrand'));\r",
							"        pm.expect(car2.model).to.eql(pm.variables.get('carModel'));\r",
							"        pm.expect(car2.vrp).to.eql(pm.variables.get('carVrp'));\r",
							"        pm.expect(car2.colour).to.eql(pm.variables.get('carColor'));\r",
							"\r",
							"\r",
							"        if (typeof car2.owner == 'number') {\r",
							"            pm.expect(car2.owner).to.eql(pm.variables.get('userId'));\r",
							"        } else {\r",
							"            pm.expect(car2.owner.id).to.be.a('number');\r",
							"            pm.expect(car2.owner.id).to.eql(pm.variables.get('userId'));\r",
							"        }\r",
							"        \r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/cars?user={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cars"
					],
					"query": [
						{
							"key": "user",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Cars returned",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cars?user=3220906&vrp=enim magna",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars"
							],
							"query": [
								{
									"key": "user",
									"value": "3220906"
								},
								{
									"key": "vrp",
									"value": "enim magna"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n  {\n    \"id\": 58554596,\n    \"brand\": \"nulla ullamco sed exercitation magna\",\n    \"model\": \"est aute irure mollit\",\n    \"vrp\": \"incididunt i\",\n    \"owner\": {\n      \"id\": 93990886,\n      \"firstName\": \"et adipisicing dolore id dolor\",\n      \"lastName\": \"quis in culpa laboris\",\n      \"email\": \"eu commodo est cillum\",\n      \"cars\": [\n        {\n          \"id\": -52074236\n        },\n        {\n          \"id\": 36206073\n        }\n      ]\n    },\n    \"colour\": \"Duis exercitation commodo\",\n    \"type\": {\n      \"id\": 79847586,\n      \"name\": \"culpa proident Excepteur do\"\n    },\n    \"reservations\": [\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      },\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      }\n    ]\n  },\n  {\n    \"id\": -82245540,\n    \"brand\": \"ullamco\",\n    \"model\": \"sint voluptate in\",\n    \"vrp\": \"magna ullamco in aute pariatur\",\n    \"owner\": {\n      \"id\": 45400559,\n      \"firstName\": \"officia in dolor\",\n      \"lastName\": \"dolore labore nulla\",\n      \"email\": \"incididunt reprehenderit\",\n      \"cars\": [\n        {\n          \"id\": 22423658\n        },\n        {\n          \"id\": -35222652\n        }\n      ]\n    },\n    \"colour\": \"pariatur deserunt minim\",\n    \"type\": {\n      \"id\": 11832394,\n      \"name\": \"occaecat sed\"\n    },\n    \"reservations\": [\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      },\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      }\n    ]\n  }\n]"
				}
			]
		},
		{
			"name": "Return cars Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('getAllCarsForVrp', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse).to.be.an('array');\r",
							"    pm.expect(jsonResponse.length).to.eql(1);\r",
							"\r",
							"    const car1 = jsonResponse[0];\r",
							"\r",
							"    pm.expect(car1.id).to.eql(pm.variables.get('carId'));\r",
							"    pm.expect(car1.brand).to.eql(pm.variables.get('carBrand'));\r",
							"    pm.expect(car1.model).to.eql(pm.variables.get('carModel'));\r",
							"    pm.expect(car1.vrp).to.eql(pm.variables.get('carVrp'));\r",
							"    pm.expect(car1.colour).to.eql(pm.variables.get('carColor'));\r",
							"\r",
							"    if (typeof car1.owner == 'number') {\r",
							"        pm.expect(car1.owner).to.eql(pm.variables.get('userId'));\r",
							"    } else {\r",
							"        pm.expect(car1.owner.id).to.be.a('number');\r",
							"        pm.expect(car1.owner.id).to.eql(pm.variables.get('userId'));\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/cars?vrp={{carVrp}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cars"
					],
					"query": [
						{
							"key": "vrp",
							"value": "{{carVrp}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Cars returned",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cars?user=3220906&vrp=enim magna",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars"
							],
							"query": [
								{
									"key": "user",
									"value": "3220906"
								},
								{
									"key": "vrp",
									"value": "enim magna"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n  {\n    \"id\": 58554596,\n    \"brand\": \"nulla ullamco sed exercitation magna\",\n    \"model\": \"est aute irure mollit\",\n    \"vrp\": \"incididunt i\",\n    \"owner\": {\n      \"id\": 93990886,\n      \"firstName\": \"et adipisicing dolore id dolor\",\n      \"lastName\": \"quis in culpa laboris\",\n      \"email\": \"eu commodo est cillum\",\n      \"cars\": [\n        {\n          \"id\": -52074236\n        },\n        {\n          \"id\": 36206073\n        }\n      ]\n    },\n    \"colour\": \"Duis exercitation commodo\",\n    \"type\": {\n      \"id\": 79847586,\n      \"name\": \"culpa proident Excepteur do\"\n    },\n    \"reservations\": [\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      },\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      }\n    ]\n  },\n  {\n    \"id\": -82245540,\n    \"brand\": \"ullamco\",\n    \"model\": \"sint voluptate in\",\n    \"vrp\": \"magna ullamco in aute pariatur\",\n    \"owner\": {\n      \"id\": 45400559,\n      \"firstName\": \"officia in dolor\",\n      \"lastName\": \"dolore labore nulla\",\n      \"email\": \"incididunt reprehenderit\",\n      \"cars\": [\n        {\n          \"id\": 22423658\n        },\n        {\n          \"id\": -35222652\n        }\n      ]\n    },\n    \"colour\": \"pariatur deserunt minim\",\n    \"type\": {\n      \"id\": 11832394,\n      \"name\": \"occaecat sed\"\n    },\n    \"reservations\": [\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      },\n      {\n        \"value\": \"reference #/components/schemas/CReservationDownFromCar not found in the OpenAPI spec\"\n      }\n    ]\n  }\n]"
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{auth_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{auth_name}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:8080/api",
			"type": "string"
		}
	]
}